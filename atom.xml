<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿伟的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-15T17:28:32.897Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>阿伟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/01/30/C++%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2021/01/30/C++%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</id>
    <published>2021-01-29T17:17:50.524Z</published>
    <updated>2021-01-15T17:28:32.897Z</updated>
    
    <content type="html"><![CDATA[<p><strong>C++基础语法入门</strong></p><p>2021年1月11日</p><p>23:14</p><h3 id="一-C-初识"><a href="#一-C-初识" class="headerlink" title="一.C++初识"></a>一.C++初识</h3><p><strong>1.1 C++ 定义常量的两种方式：</strong></p><ul><li><p>define 宏常量: #define 常量名 常量值；</p><p>通常在一个文件上方定义，表示一个常量；</p></li><li><p>const修饰的变量 const 数据类型 常量名 = 常量值</p><p>通常在变量定义前加关键字const，修饰该变量为常量，不可修改</p></li></ul><p><strong>1.2关键字：</strong></p><ul><li><p>作用：关键字是C++中预先保留的单词（标识符）</p><p><strong>在定义变量或常量时，不要使用关键字；</strong></p><p><strong>标识符命名规则同C；</strong></p></li></ul><h3 id="二-数据类型："><a href="#二-数据类型：" class="headerlink" title="二.数据类型："></a>二.数据类型：</h3><p><strong>2.1 整型：</strong>以下整型数据表示方法的区别在于 <strong>所占内存空间不同</strong> </p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间（字节）</strong></th><th><strong>取值范围</strong></th></tr></thead><tbody><tr><td>short（短整型）</td><td>2</td><td>-2^15<del>2^15-1（-32768</del>32767）</td></tr><tr><td>int（整型）</td><td>4</td><td>-2^31~2^31-1</td></tr><tr><td>long（长整型）</td><td>windows为4字节，linux为4字节（32位），8字节（64位）</td><td>-2^31~2^31-1</td></tr><tr><td>long long（长长整型）</td><td>8</td><td>-2^63~2^63-1</td></tr></tbody></table><p><strong>结论：</strong>short &lt;int&lt;=long&lt;long long</p><p><strong>2.2 sizeof</strong> 利用sizeof关键字可以统计数据类型所占内存大小</p><p>语法：sizeof（数据类型/变量）</p><p>**2.3实型（浮点型）:**表示小数</p><p>单精度：float</p><p>双精度：double</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">3.14f</span>; <span class="comment">//强调数据为flaot型，默认为double型</span></span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><p>两者的区别在于表示的有效数字范围不同</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间（字节）</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4</td><td>7位有效数字</td></tr><tr><td>double</td><td>8</td><td>15~16位有效数字</td></tr></tbody></table><p><strong>注：默认情况下，输出一个小数，会显示出6位有效数字</strong></p><p>//科学计数法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f2 = <span class="number">3e2</span>； <span class="comment">//3*10^2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;f2 = &quot;</span> &lt;&lt;f2&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>2.4 字符型：</strong>字符型变量作用于显示单个字符</p><ul><li>C和C++中字符变量只占一个字节</li><li>字符型变量并不是把字符本身放到内存中储存，而是将对应的ASCII编码放到存储单元 </li></ul><p><strong>2.5 转义字符：</strong>用于表示一些<strong>不能显示出来的ASCII字符</strong></p><p>现阶段常用转义字符：\n(换行)， \t(水平制表，跳转到下一个tab位置，==可以整齐的输出数据==)， \(代表一个反斜杠字符)</p><p><strong>2.6 字符串型：</strong>用于表示一串字符</p><ul><li><strong>两种风格</strong></li></ul><p><strong>1.C风格字符串：</strong>char 变量名[ ] = “字符串值”==(双引号)==</p><p><code>char str1[] = &quot;hello world&quot;;</code></p><p><strong>2.C++风格字符串：</strong>string 变量名 = ”字符串值“</p><p><code>string str2 = &quot;hello world&quot;;</code></p><p>==使用前必须包含头文件== <code>#include&lt;string&gt;</code></p><p><strong>2.7 布尔类型：</strong>布尔数据类型代表真或假的值</p><p>bool数据类型只有两个值：</p><ul><li>ture—真（本质是1）</li><li>false—假（本质是0）</li></ul><p>==<strong>bool类型占一个字节大小</strong>==</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p><strong>2.8 数据的输出</strong></p><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong><code>cin &gt;&gt; 变量</code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//整型输入</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;请输入整型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;整型变量a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-运算符"><a href="#三-运算符" class="headerlink" title="三.运算符"></a>三.运算符</h3><p><strong>3.1 算数运算符：</strong>用于处理四则运算</p><ul><li>运算规则同C</li></ul><p><strong>3.2 赋值运算符：</strong>用于将表达式的值赋给变量</p><ul><li>运算规则同C</li></ul><p><strong>3.3 比较运算符：</strong>用于表示式的比较，并返回一个真值或假值</p><ul><li>运算规则同C</li></ul><p><strong>3.4 逻辑运算符：</strong>用于根据表达式的值返回真值或假值</p><ul><li>运算规则同C</li></ul><h3 id="三-程序流程结构"><a href="#三-程序流程结构" class="headerlink" title="三.程序流程结构"></a>三.程序流程结构</h3><p>C/C++支持最基本的三种程序运行结构：==顺序结构，选择结构，循环结构==</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某种代码</li></ul><h4 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h4><p><strong>4.1.1 if语句：</strong>执行满足条件的语句</p><ul><li><p>单行：<code>if(条件) &#123; 条件满足执行的语句 &#125;;</code></p></li><li><p>多行：<code>if(条件) &#123; 条件满足执行的语句 &#125; else &#123;条件不满足执行的语句&#125;;</code></p></li><li><p>多条件：<code>if(条件1) &#123; 条件1满足执行的语句&#125; else if (条件2) &#123;条件2满足执行的语句&#125;... else &#123; 都不满足执行的语句&#125;;</code></p></li><li><p>嵌套：在if语句中，嵌套使用if语句</p></li></ul><p><strong>4.1.2 三目运算符：</strong></p><p><strong>语法：</strong><code>表达式1 ？ 表达式2 ： 表达式3</code></p><p><strong>解释：</strong>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>​            如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将变量a和b中大的值赋给变量c</span></span><br><span class="line">c = (a &gt; b ? a : b);</span><br></pre></td></tr></table></figure><p><strong>4.1.3 switch语句：</strong>执行多条件分支语句</p><ul><li>语法同C</li></ul><h4 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h4><p><strong>4.2.1 while循环语句：</strong>满足循环条件，执行循环语句</p><p><code>while(循环条件) &#123; 循环语句 &#125;;</code></p><ul><li>只要循环条件结果为真，就执行循环语句</li></ul><p><strong>4.2.2 do…while 循环语句：</strong>满足循环条件，执行循环语句</p><p><code>do&#123;循环语句&#125; while(循环条件);</code></p><ul><li>与while的区别为==do…while会先执行一次循环语句==，再判断循环条件</li></ul><p><strong>4.2.3 for循环：</strong>满足循环条件，执行循环语句</p><p><code>for(起始表达式；条件表达式；末尾表达式) &#123; 循环语句 &#125;;</code></p><h4 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h4><p><strong>4.3.1 break语句：</strong>用于跳出==选择结构==或者==循环结构==</p><p><strong>4.3.2 continue语句：</strong>在循环语句中，跳过本次循环中尚未执行的语句，继续执行下一次循环</p><p><strong>4.3.3 goto语句：</strong>可以无条件跳转语句</p><p><code>goto 标记;</code></p><ul><li>如果标记的名称存在，执行到goto语句时，会跳转到标记位置</li></ul><p>注：在程序中不建议使用goto语句，以免造成程序的混乱</p><h4 id="五-数组"><a href="#五-数组" class="headerlink" title="五.数组"></a>五.数组</h4><p><strong>5.1 一维数组</strong></p><ul><li>一维数组的定义方式</li></ul><p><code>数组类型  数组名  [ 数组长度 ];</code></p><p><code>数组类型  数组名  [数组长度] = &#123;值1，值2...&#125;;</code></p><p><code>数组类型  数组名  [] = &#123;值1，值2 ...&#125;;</code></p><ul><li><p>一维数组数组名</p><p><strong>用途：</strong>1.可以统计整个数组在内存中的长度     <code>sizeof(arr)</code></p><p>​            2.可以获取数组在内存中的首地址     </p><p><strong>注：</strong>数组名是一个常量，不能进行赋值</p></li></ul><p><strong>5.2 二维数组</strong></p><ul><li>定义，用法同C</li></ul><p>在定义二维数组时，如果初始化了数据，则可以省略行数</p><h4 id="六-函数"><a href="#六-函数" class="headerlink" title="六.函数"></a>六.函数</h4><p>函数能够将一段经常使用的代码封装起来，减少重复代码，一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能</p><p><strong>6.1 函数的定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">返回值类型  函数名 （参数列表）</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    函数体语句</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span>表达式</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现加法计算的函数</span></span><br><span class="line"><span class="keyword">int</span> add(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = a + b;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.2 函数的调用：</strong>使用定义好的函数</p><p><code>函数名 （参数）</code></p><p><strong>6.3 值传递</strong></p><ul><li>所谓值传递，就是函数调用时实参将数值传递给形参</li><li>值传递时，==如果形参发生改变，并不会影响实参==</li></ul><p><strong>6.4 函数的声明：</strong>告诉编译器函数名称及如何调用函数，函数的实际主体可以单独定义</p><ul><li>函数的声明可以多次，但是函数的定义只能有一次</li></ul><p><strong>6.5 函数的分文件编写：</strong>让代码的结构更加的清晰</p><p>函数分文件编写一般有四个步骤：</p><ul><li>创建后缀名为.h的头文件</li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;C++基础语法入门&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2021年1月11日&lt;/p&gt;
&lt;p&gt;23:14&lt;/p&gt;
&lt;h3 id=&quot;一-C-初识&quot;&gt;&lt;a href=&quot;#一-C-初识&quot; class=&quot;headerlink&quot; title=&quot;一.C++初识&quot;&gt;&lt;/a&gt;一.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://example.com/2021/01/22/My-New-Post/"/>
    <id>http://example.com/2021/01/22/My-New-Post/</id>
    <published>2021-01-22T13:37:22.000Z</published>
    <updated>2021-01-22T13:37:22.526Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/01/17/hello-world/"/>
    <id>http://example.com/2021/01/17/hello-world/</id>
    <published>2021-01-17T07:00:21.701Z</published>
    <updated>2021-01-17T07:00:21.701Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
